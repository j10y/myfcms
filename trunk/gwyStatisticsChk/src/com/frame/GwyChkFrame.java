/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.frame;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import org.wltea.expression.ExpressionExecutor;
import org.wltea.expression.ExpressionToken;
import org.wltea.expression.IllegalExpressionException;

import com.base.Common;

/**
 * 
 * @author xxk
 */
public class GwyChkFrame extends javax.swing.JFrame {

	/**
	 * Creates new form GwyChkFrame
	 */
	public GwyChkFrame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		resultDialog = new javax.swing.JDialog();
		jScrollPane2 = new javax.swing.JScrollPane();
		resultTable = new javax.swing.JTable();
		exportButton = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		lastYearPath = new javax.swing.JTextField();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		thisYearPath = new javax.swing.JTextField();
		actionButton = new javax.swing.JButton();
		progressBar = new javax.swing.JProgressBar();
		jComboBox1 = new javax.swing.JComboBox();

		resultDialog.setTitle("校核结果");
		// resultDialog.setAlwaysOnTop(true);
//		resultDialog.setLocationByPlatform(true);
		resultDialog.setLocationRelativeTo(null);
		
		resultDialog.setMinimumSize(new java.awt.Dimension(550, 550));

		resultTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "", "校核问题", "值" }) {
			Class[] types = new Class[] { java.lang.Integer.class, java.lang.String.class,
					java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, false, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		resultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		resultTable.getTableHeader().setReorderingAllowed(false);
		jScrollPane2.setViewportView(resultTable);
		resultTable.getColumnModel().getColumn(0).setMinWidth(50);
		resultTable.getColumnModel().getColumn(0).setPreferredWidth(50);
		resultTable.getColumnModel().getColumn(0).setMaxWidth(50);

		exportButton.setText("导出校核结果");
		exportButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exportButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout resultDialogLayout = new javax.swing.GroupLayout(resultDialog
				.getContentPane());
		resultDialog.getContentPane().setLayout(resultDialogLayout);
		resultDialogLayout.setHorizontalGroup(resultDialogLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				resultDialogLayout.createSequentialGroup().addContainerGap().addGroup(
						resultDialogLayout.createParallelGroup(
								javax.swing.GroupLayout.Alignment.CENTER).addComponent(
								exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105,
								javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jScrollPane2,
								javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE))
						.addContainerGap()));
		resultDialogLayout.setVerticalGroup(resultDialogLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				resultDialogLayout.createSequentialGroup().addContainerGap().addComponent(
						jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(exportButton).addContainerGap()));

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("公务员统计校核软件");
//		setLocationByPlatform(true);
		
		setResizable(false);

		jLabel1.setText("中共黄冈市委组织部");

		jButton1.setText("选择去年数据");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("选择今年数据");
		jButton2.setActionCommand("选择今年数据");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		actionButton.setText("开始校核");
		actionButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				actionButtonActionPerformed(evt);
			}
		});

		jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "公务员统计表",
				"参照公务员法管理的群团机关工作人员统计表", "参照公务员法管理的事业单位工作人员统计表", "地方各级领导班子成员情况统计表" }));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addGroup(
						layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
								.addGroup(
										layout.createSequentialGroup().addComponent(progressBar,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE).addContainerGap()).addGroup(
										layout.createSequentialGroup().addComponent(jLabel1)
												.addGap(81, 81, 81)))).addGroup(
				layout.createSequentialGroup().addGap(385, 385, 385).addComponent(actionButton,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE).addContainerGap()).addGroup(
				layout.createSequentialGroup().addGap(10, 10, 10).addComponent(jComboBox1, 0,
						javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGap(125, 125, 125))
				.addGroup(
						layout.createSequentialGroup().addGap(10, 10, 10)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(thisYearPath,
														javax.swing.GroupLayout.DEFAULT_SIZE, 365,
														Short.MAX_VALUE).addComponent(lastYearPath,
														javax.swing.GroupLayout.DEFAULT_SIZE, 365,
														Short.MAX_VALUE)).addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jButton1).addComponent(jButton2))
								.addGap(10, 10, 10)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(jLabel1).addGap(18,
						18, 18).addGroup(
						layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(lastYearPath, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(
										jButton1)).addGap(18, 18, 18).addGroup(
						layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jButton2).addComponent(thisYearPath,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18)
						.addGroup(
								layout.createParallelGroup(
										javax.swing.GroupLayout.Alignment.BASELINE).addComponent(
										actionButton).addComponent(jComboBox1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
								javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9,
								Short.MAX_VALUE).addComponent(progressBar,
								javax.swing.GroupLayout.PREFERRED_SIZE, 22,
								javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
		
		pack();
	}// </editor-fold>

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		FileSystemView fsv = FileSystemView.getFileSystemView();
		JFileChooser fc = new JFileChooser(fsv.getHomeDirectory());
		fc.setDialogType(WIDTH);
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
			@Override
			public boolean accept(File f) {
				return f.isDirectory() || f.getName().endsWith(".xls");
			}

			@Override
			public String getDescription() {
				return "xls文件";
			}
		});
		int i = fc.showOpenDialog(this);
		if (i == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			String URL = file.getPath();
			lastYearPath.setText(URL);
		}
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		FileSystemView fsv = FileSystemView.getFileSystemView();
		JFileChooser fc = new JFileChooser(fsv.getHomeDirectory());
		fc.setDialogType(WIDTH);
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {

			@Override
			public boolean accept(File f) {
				return f.isDirectory() || f.getName().endsWith(".xls");
			}

			@Override
			public String getDescription() {
				return "xls文件";
			}

		});

		int i = fc.showOpenDialog(this);
		if (i == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			String URL = file.getPath();
			thisYearPath.setText(URL);
		}
	}

	private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {
		actionButton.setEnabled(false);
		jComboBox1.setEnabled(false);

		Thread thread = new Thread() {
			@Override
			public void run() {

				if (lastYearPath.getText().equals("")) {
					JOptionPane.showMessageDialog(GwyChkFrame.this, "去年数据文件未选择");
					actionButton.setEnabled(true);
					jComboBox1.setEnabled(true);
					return;
				}

				if (thisYearPath.getText().equals("")) {
					JOptionPane.showMessageDialog(GwyChkFrame.this, "今年数据文件未选择");
					actionButton.setEnabled(true);
					jComboBox1.setEnabled(true);
					return;
				}

				HashSet<String> operator = new HashSet<String>();

				operator.add("+");
				operator.add("-");
				operator.add("*");
				operator.add("/");

				operator.add("==");
				operator.add(">");
				operator.add(">=");
				operator.add("<");
				operator.add("<=");
				operator.add("<>");

				operator.add("(");
				operator.add(")");

				operator.add("!");
				operator.add("%");
				operator.add("&&");
				operator.add("||");

				try {
					FileReader reader = new FileReader("source" + jComboBox1.getSelectedIndex());
					BufferedReader br = new BufferedReader(reader);

					InputStream is1 = new FileInputStream(lastYearPath.getText());
					InputStream is2 = new FileInputStream(thisYearPath.getText());
					Workbook wb1 = Workbook.getWorkbook(is1);
					Workbook wb2 = Workbook.getWorkbook(is2);

					String str = null;
					while ((str = br.readLine()) != null) {
						if (!str.isEmpty()) {
							str = str.replaceAll(" ", "");

							String str1[] = str.split("\\?");

							String expression = str1[0];
							String reason = str1[1];

							String experssions[] = expression.split(";");

							for (int i = 0; i < experssions.length; i++) {
								if (!operator.contains(experssions[i])) {

									String values[] = experssions[i].split(",");

									String value = "";

									if (values[0].equals("1")) {
										Sheet s1 = wb1.getSheet(Integer.parseInt(values[1]));// 获取sheet
										value = s1.getCell(Common.getLetterNumber(values[2]) - 1,
												Integer.parseInt(values[3]) - 1).getContents();
									}
									if (values[0].equals("2")) {
										Sheet s2 = wb2.getSheet(Integer.parseInt(values[1]));// 获取sheet
										value = s2.getCell(Common.getLetterNumber(values[2]) - 1,
												Integer.parseInt(values[3]) - 1).getContents();
									}

									if (value.equals("")) {
										value = "0";
									}
									experssions[i] = value;
								}
							}

							StringBuffer sb = new StringBuffer();

							for (int j = 0; j < experssions.length; j++) {
								sb.append(experssions[j]);
							}

							ExpressionExecutor ee = new ExpressionExecutor();

							List<ExpressionToken> tokenList = ee.analyze(sb.toString());

							tokenList = ee.compile(tokenList);

							if (!Boolean.valueOf(ee.execute(tokenList).toJavaObject().toString())) {
								// System.out.println("错误;" + reason);
								resultMap.put(reason, sb.toString());
							}

						}
					}

					br.close();
					reader.close();

					DefaultTableModel tableModel = (DefaultTableModel) resultTable.getModel();
					tableModel.setRowCount(0);// 清除原有行
					
					resultDialog.setTitle(jComboBox1.getSelectedItem().toString()+resultDialog.getTitle());

					int i = 0;
					for (String key : resultMap.keySet()) {
						Object[] arr = new Object[3];
						arr[0] = String.valueOf(i + 1);
						arr[1] = key;
						arr[2] = resultMap.get(key);
						tableModel.addRow(arr);
						i++;
					}
					resultTable.invalidate();

					resultDialog.setVisible(true);
					resultDialog.setLocationRelativeTo(resultDialog.getOwner());

				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (BiffException e) {
					e.printStackTrace();
				} catch (IllegalExpressionException e) {
					e.printStackTrace();
				} catch (ParseException e) {
					e.printStackTrace();
				}

				progressBar.setValue(0);
				actionButton.setEnabled(true);
				jComboBox1.setEnabled(true);

			}

		};
		thread.start();
	}

	private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {

		FileSystemView fsv = FileSystemView.getFileSystemView();
		JFileChooser fc = new JFileChooser(fsv.getHomeDirectory());
		fc.setDialogType(JFileChooser.SAVE_DIALOG);
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

		fc.setFileFilter(new javax.swing.filechooser.FileFilter() {

			@Override
			public boolean accept(File f) {
				return f.isDirectory() || f.getName().endsWith(".xls");
			}

			@Override
			public String getDescription() {
				return "xls文件";
			}

		});
		
		int i = fc.showDialog(resultDialog, "保存");
		if (i == JFileChooser.APPROVE_OPTION) {
			
			File file = fc.getSelectedFile();
			String URL = file.getPath();
			if (!URL.endsWith(".xls")) {
				URL = URL + ".xls";
			}

			System.out.println(URL);

			FileOutputStream fos = null;
			WritableWorkbook wwb = null;

			try {
				fos = new FileOutputStream(URL);

				wwb = Workbook.createWorkbook(fos);
				WritableSheet ws = wwb.createSheet(jComboBox1.getSelectedItem().toString()+resultDialog.getTitle(), 0);

				int j = 0;
				for (String key : resultMap.keySet()) {
					Label label1 = new Label(0, j, key);
					ws.addCell(label1);
					Label label2 = new Label(1, j, resultMap.get(key));
					ws.addCell(label2);
					j++;
				}

				wwb.write();
//				wwb.close();
//				fos.close();

			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (RowsExceededException e) {
				e.printStackTrace();
			} catch (WriteException e) {
				e.printStackTrace();
			} finally {
				if (wwb != null) {
					try {
						wwb.close();
					} catch (WriteException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				if (fos != null) {
					try {
						fos.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		// try {
		// for (javax.swing.UIManager.LookAndFeelInfo info :
		// javax.swing.UIManager.getInstalledLookAndFeels()) {
		// if ("Nimbus".equals(info.getName())) {
		// javax.swing.UIManager.setLookAndFeel(info.getClassName());
		// break;
		// }
		// }
		// } catch (ClassNotFoundException ex) {
		// java.util.logging.Logger.getLogger(GwyChkFrame.class.getName()).log(java.util.logging.Level.SEVERE,
		// null, ex);
		// } catch (InstantiationException ex) {
		// java.util.logging.Logger.getLogger(GwyChkFrame.class.getName()).log(java.util.logging.Level.SEVERE,
		// null, ex);
		// } catch (IllegalAccessException ex) {
		// java.util.logging.Logger.getLogger(GwyChkFrame.class.getName()).log(java.util.logging.Level.SEVERE,
		// null, ex);
		// } catch (javax.swing.UnsupportedLookAndFeelException ex) {
		// java.util.logging.Logger.getLogger(GwyChkFrame.class.getName()).log(java.util.logging.Level.SEVERE,
		// null, ex);
		// }
		try {
			javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager
					.getSystemLookAndFeelClassName());
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				GwyChkFrame gwyChk = new GwyChkFrame();
				gwyChk.setVisible(true);
				gwyChk.setLocationRelativeTo(gwyChk.getOwner()); 
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JButton actionButton;
	private javax.swing.JButton exportButton;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JComboBox jComboBox1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextField lastYearPath;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JDialog resultDialog;
	private javax.swing.JTable resultTable;
	private javax.swing.JTextField thisYearPath;
	Map<String, String> resultMap = new LinkedHashMap<String, String>();
	// End of variables declaration
}
